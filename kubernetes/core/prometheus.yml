apiVersion: v1
data:
  alert.rules: |
    {% raw %}
    ALERT service_down
      IF up == 0

    ALERT service_unavailable
      IF probe_success == 0

    ALERT high_load
      IF node_load1 > 0.5
      ANNOTATIONS {
          summary = "Instance {{ $labels.instance }} under high load",
          description = "{{ $labels.instance }} of job {{ $labels.job }} is under high load.",
      }
    {% endraw %}
  prometheus.yml: |
    # my global config
    global:
      scrape_interval:     15s # By default, scrape targets every 15 seconds.
      evaluation_interval: 15s # By default, scrape targets every 15 seconds.
      # scrape_timeout is set to the global default (10s).

      # Attach these labels to any time series or alerts when communicating with
      # external systems (federation, remote storage, Alertmanager).
      external_labels:
          monitor: '{{cluster.domain_name}}'

    # Load and evaluate rules in this file every 'evaluation_interval' seconds.
    rule_files:
      - "alert.rules"
      # - "first.rules"
      # - "second.rules"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'

        # Override the global default and scrape targets from this job every 5 seconds.
        scrape_interval: 5s

        # context path
        metrics_path: /prometheus/metrics
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
             - targets: ['localhost:9090']
      - job_name: 'kubernetes-nodes'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration (`in_cluster` below) because discovery & scraping are two
        # separate concerns in Prometheus.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-services-tcp'
        metrics_path: /probe
        params:
          module: [tcp_connect_v4]

        kubernetes_sd_configs:
        - role: service

        relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - target_label: __address__
          replacement: localhost:9115
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_service_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name

      - job_name: 'kubernetes-services-health'
        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
        - role: service

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_quartic_io_healthcheck_port]
          action: keep
          regex: (.+)
        - source_labels: [__meta_kubernetes_service_annotation_quartic_io_healthcheck_path]
          action: keep
          regex: (.+)
        - source_labels: [__address__,__meta_kubernetes_service_annotation_quartic_io_healthcheck_port,__meta_kubernetes_service_annotation_quartic_io_healthcheck_path]
          target_label: __param_target
          regex: (.+)(:\d+);(\d+);(.+)
          replacement: $1:$3$4
        - target_label: __address__
          replacement: localhost:9115
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_service_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name
kind: ConfigMap
metadata:
  namespace: core
  name: prometheus-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: core
  name: blackbox-config
data:
  blackbox.yml: |
    modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
      http:
        prober: http
        timeout: 15s
        http:
          valid_status_codes: []
          method: GET
      tcp_connect_v4:
        prober: tcp
        timeout: 5s
        tcp:
          protocol: "tcp4"
---
apiVersion: v1
data:
  config.yml: |-
    route:
        receiver: 'slack'

    receivers:
        - name: 'slack'
          slack_configs:
              - send_resolved: true
                username: prometheus
                channel: '#infrastructure'
                api_url: 'https://hooks.slack.com/services/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'
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: alertmanager-config
  namespace: core
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: core
  labels:
    component: prometheus
spec:
  type: NodePort
  ports:
  - port: 9090
    nodePort: 32220
    protocol: TCP
    name: prometheus
  - port: 9093
    nodePort: 32221
    protocol: TCP
    name: alertmanager
  selector:
    component: prometheus
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: prometheus
  namespace: core
spec:
  replicas: 1
  template:
    metadata:
      labels:
        component: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - '-config.file=/etc/prometheus/prometheus.yml'
            - '-storage.local.path=/prometheus'
            - '-alertmanager.url=http://localhost:9093'
            - '-web.external-url=https://core.{{cluster.domain_name}}/prometheus'
          ports:
            - containerPort: 9090
          resources:
            limits:
              cpu: 100m
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus
            - name: data
              mountPath: /prometheus
        - name: blackbox
          image: prom/blackbox-exporter
          args:
            - '-config.file=/etc/blackbox/blackbox.yml'
          ports:
            - containerPort: 9115
          resources:
            limits:
              cpu: 100m
          volumeMounts:
            - name: blackbox-config-volume
              mountPath: /etc/blackbox
        - name: alertmanager
          image: prom/alertmanager
          ports:
            - containerPort: 9093
          resources:
            limits:
              cpu: 100m
          volumeMounts:
            - name: alertmanager-config-volume
              mountPath: /etc/alertmanager/
            - name: alertmanager-data
              mountPath: /alertmanager
          args:
            - '-config.file=/etc/alertmanager/config.yml'
            - '-storage.path=/alertmanager'
            - '-web.external-url=https://core.{{cluster.domain_name}}/alertmanager'
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
        - name: blackbox-config-volume
          configMap:
            name: blackbox-config
        - name: alertmanager-config-volume
          configMap:
            name: alertmanager-config
        - name: data
          emptyDir: {}
        - name: alertmanager-data
          emptyDir: {}
