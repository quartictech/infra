#!/usr/bin/env python

import argparse
import base64
import json
import os
import subprocess
import sys
import yaml

from jinja2 import Environment, Template, StrictUndefined

CONFIG_PATH = os.path.join(os.path.dirname(__file__), ".kube/config")

# Modified http://blog.endpoint.com/2015/01/getting-realtime-output-using-python.html for Python3 and stdin
def run_command(command, stdin="", env={}):
    process = subprocess.Popen(
        command,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        env=dict(os.environ, **env)
    )
    process.stdin.write(str.encode(stdin))
    process.stdin.close()
    while True:
        output = process.stdout.readline().decode()
        if output == "" and process.poll() is not None:
            break
        if output:
            print(output, end="")
    rc = process.poll()
    return rc


def get_filenames(path):
    if os.path.isdir(path):
        return filter(
            lambda p: os.path.isfile(p),
            [os.path.join(path, p) for p in os.listdir(path)]
        )
    else:
        return [path]


def load_config(path):
    with open(path, "r", encoding='utf-8') as stream:
        config = yaml.load(stream)
    return config


def get_operations(operation):
    if (operation == "bounce"):
        return ["delete", "apply"]
    else:
        return [operation]


def read_from_file(template_path, relative_path):
    with open(os.path.join(os.path.dirname(template_path), relative_path), "rt") as file:
        return file.read()


def run_jsonnet(path, config_path):
    process = subprocess.Popen(
        ["jsonnet", path, "--tla-code-file", "config=%s" % config_path],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    out, err = process.communicate()
    rc = process.poll()
    if rc != 0:
        raise EnvironmentError("jsonnet failed")
    return json.loads(out.decode())


def run_kubectl(dry_run, operation, stdin):
    if (dry_run):
        print(stdin)
    else:
        rc = run_command(
            ["kubectl", operation, "-f", "-"],
            env={"KUBECONFIG": CONFIG_PATH},
            stdin=stdin
        )
        if rc != 0:
            raise EnvironmentError("kubectl failed")


def run_from_template(operation, dry_run, template_path, config):
    env = Environment(undefined=StrictUndefined)
    env.filters["b64encode"] = lambda s: base64.b64encode(s.encode()).decode("utf-8")
    with open(template_path, "rt") as file:
        template = env.from_string(file.read())
    config["from"] = lambda relative_path: read_from_file(template_path, relative_path)
    
    rendered = template.render(config)
    run_kubectl(dry_run, operation, rendered)


def run_from_jsonnet(operation, dry_run, template_path, config_path):
    rendered = json.dumps(run_jsonnet(template_path, config_path), indent=2)
    run_kubectl(dry_run, operation, rendered)


def switch_context(dry_run, gcloud):
    if (not dry_run):
        rc = run_command(
            [
                "gcloud",
                "container",
                "clusters",
                "get-credentials",
                gcloud["cluster_name"],
                "--project",
                gcloud["project_id"],
                "--zone",
                gcloud["zone"]
            ],
            env={"KUBECONFIG": CONFIG_PATH}
        )
        if rc != 0:
            raise EnvironmentError("Switching context failed")


def maybe_get_confirmation(dry_run, require_confirmation):
    if (require_confirmation and not dry_run):
        s = input("Type 'yes' to confirm: ")
        if s != "yes":
            sys.exit(0)


def extract_environment_map(from_args):
    environment = {}
    for var in from_args:
        bits = var[0].split("=")
        if len(bits) != 2:
            print("Malformed variable option: {}".format(var))
            sys.exit(1)
        environment[bits[0]] = bits[1]
    return environment


def parse_args():
    parser = argparse.ArgumentParser(description="Deploy Kubernetes stuff with templatisation.")
    parser.add_argument("-c", "--cluster", required=True,
                           help="Cluster name (should match prefix of a file in clusters/ dir)")

    subparsers = parser.add_subparsers(help="sub-command help", dest="operation")
    subparsers.required = True

    OPERATIONS = [
        ("create", "create resource"),
        ("apply", "apply configuration to a resource"),
        ("delete", "delete a resource"),
        ("bounce", "delete and recreate a resource")
    ]

    for operation, help_msg in OPERATIONS:
        subparser = subparsers.add_parser(operation, help=help_msg)

        subparser.set_defaults(operation=operation)
        subparser.add_argument("-f", "--filename", required=True,
                               help="Kubernetes definition file (or directory containing files)")
        subparser.add_argument("-e", "--environment", nargs=1, action="append", default=[],
                               help="Additional variables for template expansion")
        subparser.add_argument("-d", "--dry-run", action="store_true",
                               help="Enable dry-run mode (just prints rendered templates, no actions are taken)")

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    if not args.operation:
        sys.exit(1)

    yml_config_path = os.path.join("config", "clusters", args.cluster + ".yml")
    json_config_path = os.path.join("config", "clusters", args.cluster + ".jsonnet")

    cluster_config = load_config(os.path.join("config", "clusters", args.cluster + ".yml"))
    environment = extract_environment_map(args.environment)

    maybe_get_confirmation(args.dry_run, cluster_config["require_confirmation"])

    switch_context(args.dry_run, cluster_config["gcloud"])
        
    for operation in get_operations(args.operation):
        for template_path in get_filenames(args.filename):
            print("--- {} [{}] ---".format(operation.upper(), template_path))
            if template_path.endswith(".yml"):
                run_from_template(operation, args.dry_run, template_path, 
                                  {"cluster": cluster_config, "environment": environment})
            else:
                run_from_jsonnet(operation, args.dry_run, template_path, json_config_path)
